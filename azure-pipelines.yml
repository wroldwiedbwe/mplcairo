# Notes:
# The macOS build does not install inkscape as building it from source is a bit
# silly.

jobs:

- job: 'Linux'
  pool:
    vmImage: 'ubuntu-16.04'
  strategy:
    matrix:
      Python35:
        python.version: '3.5'
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'

  steps:

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'

  - bash: |
      pip install --upgrade pip setuptools &&
        sudo PY_VERS="$PYTHON_VERSION" tools/build-manylinux-wheel.sh &&
        pip install dist/*.whl &&
        ./tools/ensure-mpl-test-data.py &&
        # pytest<3.8 needed before matplotlib#12154 (matplotlib<3.1).
        # sphinx needed before matplotlib#11360 (matplotlib<3.0).
        pip install 'pytest<3.8' sphinx &&
        sudo apt update &&
        sudo apt install ghostscript inkscape
    displayName: 'Build & install'

  - bash: |
      ./run-mpl-test-suite.py --tolerance=50 --junitxml=junit/test-results.xml
    displayName: 'Test'

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/test-results.xml'
      testRunTitle: 'Python $(python.version) / Linux'
    condition: succeededOrFailed()

  - bash: |
      cp dist/*.whl "$BUILD_ARTIFACTSTAGINGDIRECTORY"
    displayName: 'Copy files'

  - task: PublishBuildArtifacts@1
    inputs:
      artifactName: 'wheels'

- job: 'macOS'
  pool:
    vmImage: 'macOS-10.13'
  strategy:
    matrix:
      Python35:
        python.version: '3.5'
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'

  steps:

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'

  - bash: |
      pip install --upgrade pip setuptools &&
        brew update >/dev/null &&
        brew install cairo ccache llvm pkg-config &&
        # CXX must be set due to weird manipulations by distutils.
        PATH="/usr/local/opt/llvm/bin:$PATH" \
          CPPFLAGS=-L/usr/local/opt/llvm/include \
          LDFLAGS='-L/usr/local/opt/llvm/lib -Wl,-rpath,/usr/local/opt/llvm/lib' \
          CC='ccache clang' \
          CXX='ccache clang' \
          tools/build-macos-wheel.sh &&
        pip install dist/*.whl &&
        ./tools/ensure-mpl-test-data.py &&
        # pytest<3.8 needed before matplotlib#12154 (matplotlib<3.1).
        # sphinx needed before matplotlib#11360 (matplotlib<3.0).
        pip install 'pytest<3.8' sphinx &&
        brew install ghostscript
    displayName: 'Build & install'

  - bash: |
      ./run-mpl-test-suite.py --tolerance=50 --junitxml=junit/test-results.xml
    displayName: 'Test'

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/test-results.xml'
      testRunTitle: 'Python $(python.version) / macOS'
    condition: succeededOrFailed()

  - bash: |
      cp dist/*.whl "$BUILD_ARTIFACTSTAGINGDIRECTORY"
    displayName: 'Copy files'

  - task: PublishBuildArtifacts@1
    inputs:
      artifactName: 'wheels'

- job: 'Windows'
  pool:
    vmImage: 'vs2017-win2016'
  strategy:
    matrix:
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'

  steps:

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'

  - bash: |
      python -mpip install --upgrade pip setuptools &&
        git clone --depth 1 https://github.com/anntzer/cairocffi-windows-wheels &&
        python -mpip install --find-links cairocffi-windows-wheels --prefer-binary cairocffi &&
        python tools/build-windows-wheel.py &&
        python -mpip install dist/*.whl &&
        python tools/ensure-mpl-test-data.py &&
        # pytest<3.8 needed before matplotlib#12154 (matplotlib<3.1).
        # sphinx needed before matplotlib#11360 (matplotlib<3.0).
        pip install 'pytest<3.8' sphinx &&
        choco install ghostscript inkscape
    displayName: 'Build & install'

  - bash: |
      python run-mpl-test-suite.py --tolerance=50 --junitxml=junit/test-results.xml
    displayName: 'Test'

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/test-results.xml'
      testRunTitle: 'Python $(python.version) / Windows'
    condition: succeededOrFailed()

  - bash: |
      cp dist/*.whl "$BUILD_ARTIFACTSTAGINGDIRECTORY"
    displayName: 'Copy files'

  - task: PublishBuildArtifacts@1
    inputs:
      artifactName: 'wheels'

- job: 'PublishWheels'
  dependsOn:
  - Linux
  - macOS
  - Windows
  condition: succeededOrFailed()

  steps:

  - checkout: none

  - task: DownloadBuildArtifacts@0
    inputs:
      artifactName: 'wheels'
